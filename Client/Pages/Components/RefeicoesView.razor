@using diarioAlimentar.Client.Services;
@using diarioAlimentar.Shared;

@inject PorcaoService _porcaoService;
@inject RefeicaoService _refeicaoService;
@inject ReceitaService _receitaService;
@inject TradutorService _tradutorService;

@foreach (var refPeriodo in listaLocal)
{
    <div id="refeicoes-container">
        <div class="periodo">
            <span class="oi oi-book mx-2"></span>
            <span class="h4">@refPeriodo.Key.GetEnumDisplay()</span>
        </div>
        <div>
            @foreach (var refGravada in refPeriodo)
            {
                @if (refeicaoAtiva == null) refeicaoAtiva = refGravada;

                <div @onclick=@(() => refeicaoAtiva = refGravada) class="p-1 ref @(refeicaoAtiva == refGravada ? "ativa my-4" : "my-2")">
                    <div>
                        <div class="d-flex justify-content-between">
                            <p class="m-0 flex-grow-1">Refeição adicionada às: @refGravada.horario.ToShortTimeString()</p>
                            <button class="btn btn-diario-ct-alt oi oi-trash" @onclick=@(() => confirmarRemocao = !confirmarRemocao)></button>
                            @if (confirmarRemocao && refeicaoAtiva == refGravada)
                            {
                                <div class="bg-dark text-white rounded px-1">
                                    <span>Remover esta refeição vai apagar todos os alimentos registrados, tem certeza?</span>
                                    <button class="btn btn-danger btn-sm" @onclick=@(async () => await RemoverRefeicao(refGravada))>
                                        Sim
                                    </button>
                                    <button class="btn-diario-ct-alt btn-sm" @onclick=@(() => confirmarRemocao = !confirmarRemocao)>Não</button>
                                </div>
                            }
                        </div>
                        <p class="oi @(refeicaoAtiva == refGravada ? "oi-menu" : "oi-plus") mx-2"></p>
                        <span class="h4">Alimentos </span>

                        @foreach (var p in refGravada.porcoes)
                        {
                            <PorcaoView porcao=p ativa=@(refeicaoAtiva == refGravada) callbackDelete=@(async (p) => await RemoverPorcao(p)) />
                        }
                    </div>
                    @if (refeicaoAtiva == refGravada)
                    {
                        <AddAlimento refeicao=@refeicaoAtiva callbackAtualizar=@callbackAtualizar />
                        @if (refeicaoAtiva.porcoes.Any())
                        {
                            <button class="btn-diario-alt btn-sm" @onclick=@(() => SugerirReceita())>Sugestão de Receitas</button>
                        }
                        @if (mostrarReceitas)
                        {
                            <div class="container-fluid d-flex">
                                @foreach (var r in receitas)
                                {
                                    <div class="w-25 m-2">
                                        <a href=@r.url><img src=@r.img class="img-fluid" /> @r.nome</a>
                                    </div>
                                }
                            </div>
                        }
                    }
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public ICollection<Refeicao> refeicoes { get; set; }

    [Parameter]
    public Action callbackAtualizar { get; set; }

    private IEnumerable<IGrouping<Periodo, Refeicao>> listaLocal { get; set; }

    public Refeicao? refeicaoAtiva { get; set; } = null;
    private bool confirmarRemocao { get; set; } = false;

    private bool mostrarReceitas { get; set; } = false;
    private List<Receita> receitas { get; set; } = new List<Receita>();

    protected override void OnParametersSet()
    {
        listaLocal = refeicoes.OrderByDescending(r => r.horario).GroupBy(r => r.periodo);
        base.OnParametersSet();
    }

    private async void SugerirReceita()
    {
        var alimento = refeicaoAtiva.porcoes.OrderByDescending(p => p.quantidade).First().alimento.nome.Split(",").First();
        var traducao = await _tradutorService.PtParaEn(alimento);
        receitas = await _receitaService.BuscarReceita(traducao);
        for (int i = 0; i < receitas.Count; i++)
        {
            receitas[i].nome = await _tradutorService.EnParaPt(receitas[i].nome);
        }
        mostrarReceitas = true;
        StateHasChanged();
    }

    public async Task RemoverPorcao(Porcao p)
    {
        var resultado = await _porcaoService.RemovePorcao(p);
        if (resultado)
        {
            refeicoes.First(r => r.refeicaoID == p.refeicaoID).porcoes.Remove(p);
            callbackAtualizar();
        }
    }

    public async Task RemoverRefeicao(Refeicao r)
    {

        var resultado = await _refeicaoService.RemoveRefeicao(r);
        if (resultado)
        {
            refeicoes.Remove(r);
            refeicaoAtiva = null;
            callbackAtualizar();
        }
    }
}
