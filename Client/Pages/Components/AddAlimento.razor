@using diarioAlimentar.Client.Services;
@using diarioAlimentar.Shared;
@inject AlimentoService _alimentoService
@inject PorcaoService _porcaoService

<div id="alimento_form_cont">
    <button class="btn-diario" @onclick=@(() => mostrarBusca = !mostrarBusca)>Adicionar Alimento</button>
    @if (mostrarBusca)
    {
        <div>
            <p>Adicionar um alimento: </p>
            <div class="mx-4">
                <span class="oi oi-magnifying-glass"></span>
                <input id="busca" @bind=@buscaDigitada @bind:event="oninput" @onkeyup="BuscaDigitadaHandler" />
                <button class="btn-diario-alt" @onclick="BuscarAlimento">Procurar</button>
            </div>
        </div>
        @if (encontrados.Any())
        {
        <div id="busca_alimento_resultados">
            @foreach (var cat in encontrados.GroupBy(a => a.categoria))
            {
                <div>
                    <h4>@cat.Key.GetNomeCategoria()</h4>
                    @foreach (var al in cat)
                    {
                        <div class="busca_alimento_unidade">
                            <button class="oi oi-plus" @onclick=@(() => { 
                                if (expandirDetalhes == al.AlimentoID) 
                                    expandirDetalhes = -1;
                                else 
                                    expandirDetalhes = al.AlimentoID; 
                            })></button>
                            <p>@al.nome</p>
                        </div>
                        @if (expandirDetalhes == al.AlimentoID)
                        {
                            <div class="add_alimento_conf">
                                <span>Quantidade: </span>
                                <InputNumber @bind-Value=quantidade />
                                <select @bind=@medida>
                                    <option selected value=@(10)>1 Colher (10g)</option>
                                    <option value=@(30.0)>1 Fatia (30g)</option>
                                    <option value=@(200.0)>1 Copo (200ml)</option>
                                    <option value=@(1)>g/ml</option>
                                </select>
                                <button class="btn-diario-alt" @onclick=@(() => AdicionarAlimento(al))>Adicionar</button>
                            </div>
                        }
                    }
                </div>
            }
        </div>
        }
    }
</div>

@code {
    [Parameter]
    public Refeicao refeicao { get; set; }

    [Parameter]
    public Action callbackAtualizar { get; set; }

    private bool mostrarBusca { get; set; } = false;
    private string buscaDigitada { get; set; } = "";
    private double quantidade { get; set; } = 1;
    private double medida { get; set; } = 1;

    private System.Timers.Timer debounceBusca { get; set; }
    private ICollection<Alimento> encontrados { get; set; }
    private int expandirDetalhes { get; set; } = -1;

    protected override void OnInitialized()
    {
        encontrados = new List<Alimento>();
        debounceBusca = new System.Timers.Timer() { AutoReset = false, Enabled = false, Interval = 400 };
        debounceBusca.Elapsed += async (e, o) => await BuscarAlimento(); ;
    }

    private async void AdicionarAlimento(Alimento al)
    {
        var novaPorcao = (new Porcao() { Alimento = al, quantidade = (medida * quantidade) / 100, alimentoID = al.AlimentoID });
        refeicao.AdicionarPorcao(novaPorcao);
        await _porcaoService.SetPorcao(novaPorcao);
        mostrarBusca = !mostrarBusca;
        quantidade = 1;
        callbackAtualizar();
    }

    private async Task BuscaDigitadaHandler(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await BuscarAlimento();
        else
        {
            if (!debounceBusca.Enabled)
                debounceBusca.Start();
            else
                debounceBusca.Interval = 400;
        }
    }

    private async Task BuscarAlimento()
    {
        Console.WriteLine("busca");
        if (buscaDigitada.Length == 0) 
            return;
        var al = await _alimentoService.GetPorNome(buscaDigitada);
        if (al != null && al.Any())
        {
            encontrados = al;
            StateHasChanged();
        }
    }
}
