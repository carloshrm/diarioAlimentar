@using diarioAlimentar.Client.Services;
@using diarioAlimentar.Shared;
@inject AlimentoService _alimentoService;
@inject PorcaoService _porcaoService;
@implements IDisposable;

<div id="alimento-form-cont">
    <button class="btn-diario m-2" @onclick=@(() => mostrarBusca = !mostrarBusca)>Adicionar Alimento</button>
    @if (mostrarBusca)
    {
        <div class="mx-4">
            <span class="oi oi-magnifying-glass"></span>
            <input class="form-input" id="busca" @bind=@buscaDigitada @bind:event="oninput" @onkeyup="BuscaDigitadaHandler" />
            <button class="btn btn-diario-alt" @onclick="BuscarAlimento">Procurar</button>
        </div>
        @if (encontrados.Any())
        {
            <div id="busca-alimento-resultados">
                @foreach (var cat in encontrados.GroupBy(a => a.categoria))
                {
                    <div>
                        <h4>@cat.Key.GetNomeCategoria()</h4>
                        @foreach (var al in cat)
                        {
                            <div class="busca-alimento-unidade">
                                <button 
                                    class="btn btn-diario-alt oi @(expandirDetalhes == al.AlimentoID ? "oi-menu" : "oi-plus")"
                                    @onclick=@(() => expandirDetalhes = expandirDetalhes == al.AlimentoID ? -1 : al.AlimentoID )>
                                </button>
                                <p>@al.nome</p>
                            </div>
                            @if (expandirDetalhes == al.AlimentoID)
                            {
                                <div class="mx-4 add-alimento_conf">
                                    <span>Quantidade: </span>
                                    <InputNumber @bind-Value=quantidade />
                                    <select @bind=@medida class="">
                                        <option selected value=@(25.0)>Unidade peqquena (25g)</option>
                                        <option value=@(50.0)>Unidade grande (50g)</option>
                                        <option value=@(16.0)>Fatia (16g)</option>
                                        <option value=@(180.0)>Copo americano (180ml)</option>
                                        <option value=@(250.0)>Xícara de chá (250ml)</option>
                                        <option value=@(15)>Colher de sopa (15ml)</option>
                                        <option value=@(5)>Colher de chá (5ml)</option>
                                        <option value=@(1)>g/ml</option>
                                    </select>
                                    <button class="btn-diario-alt" @onclick=@(() => AdicionarAlimento(al))>Adicionar</button>
                                </div>
                            }
                        }
                    </div>
                }
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public Refeicao refeicao { get; set; }

    [Parameter]
    public Action callbackAtualizar { get; set; }

    private bool mostrarBusca { get; set; } = false;
    private string buscaDigitada { get; set; } = "";
    private double quantidade { get; set; } = 1;
    private double medida { get; set; } = 1;

    private System.Timers.Timer debounceBusca { get; set; }
    private ICollection<Alimento> encontrados { get; set; }
    private int expandirDetalhes { get; set; } = -1;

    protected override void OnInitialized()
    {
        encontrados = new List<Alimento>();
        debounceBusca = new System.Timers.Timer() { AutoReset = false, Enabled = false, Interval = 400 };
        debounceBusca.Elapsed += async (e, o) => await BuscarAlimento(); ;
    }

    private async void AdicionarAlimento(Alimento al)
    {
        var novaPorcao = (new Porcao() { alimento = al, quantidade = (medida * quantidade) / 100, alimentoID = al.AlimentoID });
        refeicao.AdicionarPorcao(novaPorcao);
        await _porcaoService.SetPorcao(novaPorcao);
        mostrarBusca = !mostrarBusca;
        quantidade = 1;
        callbackAtualizar();
    }

    private async Task BuscaDigitadaHandler(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await BuscarAlimento();
        else
        {
            if (!debounceBusca.Enabled)
                debounceBusca.Start();
            else
                debounceBusca.Interval = 400;
        }
    }

    private async Task BuscarAlimento()
    {
        Console.WriteLine("busca");
        if (buscaDigitada.Length == 0)
            return;
        var al = await _alimentoService.GetPorNome(buscaDigitada);
        if (al != null && al.Any())
        {
            encontrados = al;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        debounceBusca.Dispose();
    }

}
