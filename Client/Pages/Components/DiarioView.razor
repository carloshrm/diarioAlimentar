@using System.Security.Claims;
@using Timer = System.Timers.Timer;

@using diarioAlimentar.Client.Services;
@using diarioAlimentar.Shared;
@using iTextSharp.text.pdf;
@using iTextSharp.text;

@implements IDisposable;
@inject DiarioService _diarioService;
@inject ReceitaService _receitas;
@inject IJSRuntime _js;

<div class="container-xl" id="diario-container">
    @if (diarioAtual != null)
    {
        <div class="container-transp m-2 d-flex" id="diario-titulo">

            <h2 class="m-2">Diário Alimentar</h2>
            <div class="ms-auto d-flex align-items-center p-2 border border-2 border-white bg-white">
                <button class="btn-diario btn-sm" @onclick=@(() => TrocarDiario())>Dia anterior</button>
                <h5 class="m-2 fw-bold">Data: @diarioAtual.data.ToString("dd/MM/yyyy")</h5>
                @if (diarioAtual.data.Date != DateTime.Now.Date)
                {
                    <button class="btn btn-diario btn-sm" @onclick=@(() => TrocarDiario(voltar: false))>Dia Posterior</button>
                }
            </div>
        </div>
        <RelatorioMacro bmr=@bmr relatorio=@relatorio />

        <div class="container-transp p-2 my-4">
            <div class="d-flex justify-content-between">
                <h2>Refeições</h2>
                <button class="btn-sm btn-diario-alt m-2" @onclick=@(() => BaixarRelatorio())>Salvar</button>
                <a href=@pdfUrl>abcd</a>
            </div>
            <RefeicoesView refeicoes=@diarioAtual.refeicoes callbackAtualizar=@atualizarDiario />
            <AddRefeicao diarioAtual=@diarioAtual callbackAtualizar=@atualizarDiario />
        </div>
    }
    else
    {
        <Carregando />
    }
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private Diario diarioAtual { get; set; }

    private InfoNutricional relatorio { get; set; }
    private Action atualizarDiario { get; set; }

    private double bmr { get; set; } = 2000;
    private string pdfUrl = "";

    public DiarioView()
    {
        relatorio = new InfoNutricional();
        atualizarDiario = () =>
        {
            CalcularRelatorioGeral();
        };
    }

    protected async override Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        if (authState != null && authState.User.Identity.IsAuthenticated)
        {
            diarioAtual = await _diarioService.GetDiarioHoje();
            CalcularRelatorioGeral();
            bmr = await CalcularBMR();
        }
    }

    private async void TrocarDiario(bool voltar = true)
    {
        DateTime data;
        if (voltar)
            data = diarioAtual.data.Subtract(TimeSpan.FromDays(1));
        else
            data = diarioAtual.data.AddDays(1);

        diarioAtual = await _diarioService.GetDiarioPorData(data);
        CalcularRelatorioGeral();
    }

    private Periodo GetPeriodoAtual()
    {
        return DateTime.Now.Hour switch
        {
            >= 4 and <= 11 => Periodo.Manha,
            >= 12 and <= 16 => Periodo.Almoco,
            >= 17 and <= 24 => Periodo.Janta,
            _ => Periodo.Lanche,
        };
    }

    private async Task<double> CalcularBMR()
    {
        // REE(males) = 10 x weight(kg) + 6.25 x height(cm) - 5 x age(y) + 5;
        // REE(females) = 10 x weight(kg) + 6.25 x height(cm) - 5 x age(y) - 161.
        //Sedentary * 1.2 //Lightly active *1.375 //Moderately active *1.55 //Active * 1.725 //Very active *1.9
        var auth = await authenticationState;

        double.TryParse(auth.User.Claims.First(c => c.Type.Contains("peso")).Value, out double peso);
        int.TryParse(auth.User.Claims.First(c => c.Type.Contains("altura")).Value, out int altura);
        int idade = DateTime.Parse(auth.User.Claims.First(c => c.Type == ClaimTypes.DateOfBirth).Value).Year - DateTime.Now.Year;
        Enum.TryParse(auth.User.Claims.First(c => c.Type == ClaimTypes.Gender).Value, out Sexo sexo);
        Enum.TryParse(auth.User.Claims.First(c => c.Type.Contains("atividade")).Value, out NivelAtividade nivelAtividade);

        return (10 * peso) + (6.25 * altura) - (5 * idade) + (sexo == Sexo.masculino ? 5 : -161)
            * (NivelAtividadeHelper.GetValorAtividade(nivelAtividade));
    }

    private void CalcularRelatorioGeral()
    {
        var relGeral = new InfoNutricional();
        foreach (var relInd in diarioAtual.refeicoes.Select(a => a.GerarRelatorio()))
        {
            relGeral += relInd;
        }
        relatorio = relGeral;
        StateHasChanged();
    }

    private async Task BaixarRelatorio()
    {
        string arquivo = "Diario " + diarioAtual.data.ToString("dd_MM_YYYY") + ".pdf";
        var dados = PdfHelper.GerarPdf(arquivo, "Diario Alimentar de " + diarioAtual.data.ToShortDateString(), diarioAtual.refeicoes);
        await _js.SalvarComo("Sample.pdf", dados);

        //await _js.InvokeVoidAsync("Download", diarioAtual.ToString(), "Relatorio Alimentar de " + diarioAtual.data.ToShortDateString());
    }

    private async Task SalvarDiario()
    {
        await _diarioService.SetDiario(diarioAtual);
    }

    public async void Dispose()
    {
        await SalvarDiario();
    }
}