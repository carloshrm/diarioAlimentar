@using System.Security.Claims;
@using Timer = System.Timers.Timer;

@using diarioAlimentar.Client.Services;
@using diarioAlimentar.Shared;
@inject DiarioService _diarioService;


<div class="container-md" id="diario_container">
    <h2>Diário Alimentar</h2>
    @if (diarioAtual != null)
    {
        <div>
            <p>Data: @diarioAtual.data.ToString("dd/MM/yyyy")</p>
            <p>TODO - macro</p>
        </div>
        <div>
            @foreach (var refPeriodo in diarioAtual.Refeicoes.OrderBy(r => r.horario).GroupBy(r => r.periodo))
            {
                @if (refPeriodo.Key == GetPeriodoAtual()) SetRefeicaoAtiva(refPeriodo.Last());
                <div>
                    <p>Tipo: @refPeriodo.Key</p>
                    <div>
                        @foreach (var refe in refPeriodo)
                        {
                            <p>@refe.horario.ToShortTimeString()</p>
                            <div>
                                <h3>Alimentos: </h3>
                                @foreach (var alm in refe.Porcoes)
                                {
                                    <AlimentoView _p=alm />
                                }
                            </div>
                        }
                    </div>
                </div>
            }
            <button class="btn btn-primary">Adicionar Refeicao</button>
        </div>
    }
</div>

<AddAlimentoForm refSetter=@refeicaoSetter />
<button class="btn btn-primary" @onclick=@salvarDiario>Salvar Diario</button>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private Diario diarioAtual { get; set; }
    private Refeicao refeicaoAtual { get; set; }

    private InfoNutricional relatorio { get; set; }
    private Action<Porcao> refeicaoSetter { get; set; }

    private double bmr { get; set; }

    public DiarioView()
    {
        refeicaoSetter = setItemRefeicao;
        bmr = 2000;
    }

    protected async override Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        if (authState != null && authState.User.Identity.IsAuthenticated)
        {
            diarioAtual = await _diarioService.GetDiarioHoje();
            var refeicaoExistente = diarioAtual.Refeicoes.FirstOrDefault();

            if (refeicaoExistente != null)
            {
                SetRefeicaoAtiva(refeicaoExistente);
            }
            else
            {
                SetRefeicaoAtiva(new Refeicao() { periodo = GetPeriodoAtual() });
                diarioAtual.AdicionarRefeicao(refeicaoAtual);
            }
            bmr = await CalcularBMR();
        }
    }

    private void SetRefeicaoAtiva(Refeicao r)
    {
        refeicaoAtual = r;
    }

    private Periodo GetPeriodoAtual()
    {
        return DateTime.Now.Hour switch
        {
            >= 4 and <= 11 => Periodo.Manha,
            >= 12 and <= 16 => Periodo.Almoco,
            >= 17 and <= 24 => Periodo.Janta,
            _ => Periodo.Lanche,
        };
    }

    private async Task<double> CalcularBMR()
    {
        var auth = await authenticationState;
        // REE(males) = 10 x weight(kg) + 6.25 x height(cm) - 5 x age(y) + 5;
        // REE(females) = 10 x weight(kg) + 6.25 x height(cm) - 5 x age(y) - 161.
        // https://doi.org/10.1093%2Fajcn%2F51.2.241

        double.TryParse(auth.User.Claims.First(c => c.Type.Contains("peso")).Value, out double peso);
        int.TryParse(auth.User.Claims.First(c => c.Type.Contains("altura")).Value, out int altura);
        int idade = DateTime.Parse(auth.User.Claims.First(c => c.Type == ClaimTypes.DateOfBirth).Value).Year - DateTime.Now.Year;
        Enum.TryParse(auth.User.Claims.First(c => c.Type == ClaimTypes.Gender).Value, out Sexo sexo);
        Enum.TryParse(auth.User.Claims.First(c => c.Type.Contains("atividade")).Value, out NivelAtividade atividade);

        return (10 * peso) + (6.25 * altura) - (5 * idade) + (sexo == Sexo.masculino ? 5 : -161);
    }

    private void setItemRefeicao(Porcao a)
    {
        refeicaoAtual.AdicionarPorcao(a);
        relatorio = refeicaoAtual.GerarRelatorio();
        StateHasChanged();
    }

    private async Task salvarDiario()
    {
        var resultado = await _diarioService.SetDiario(diarioAtual);
        diarioAtual = resultado;
    }
}