@using System.Security.Claims;
@using Timer = System.Timers.Timer;

@using diarioAlimentar.Client.Services;
@using diarioAlimentar.Shared;

@implements IDisposable;
@inject DiarioService _diarioService;

<div class="container-md" id="diario-container">
    @if (diarioAtual != null)
    {
        <div class="container-transp" id="diario-titulo">
            <h1>Diário Alimentar</h1>
            <button class="btn-diario" @onclick=@(() => TrocarDiario())>Dia anterior</button>
            <h5>Data: @diarioAtual.data.ToString("dd/MM/yyyy")</h5>
            @if (diarioAtual.data.Date != DateTime.Now.Date)
            {
                <button class="btn-diario" @onclick=@(() => TrocarDiario(voltar: false))>Dia Posterior</button>
            }
        </div>
        <div class="container-transp">
            <RelatorioMacro bmr=@bmr relatorio=@relatorio />
            <button class="btn-diario m-2" @onclick=@(() => resumoSemanal = !resumoSemanal)>Ver Resumo Semanal</button>
            @if (resumoSemanal)
            {
                <div class="m-2 w-50">
                    <Grafico />
                </div>
            }
        </div>

        <div class="container-transp p-2 my-4">
            <h2>Refeições</h2>
            <RefeicoesView refeicoes=@diarioAtual.Refeicoes callbackAtualizar=@atualizarRelatorio />
            <AddRefeicao diarioAtual=@diarioAtual callbackAtualizar=@atualizarRelatorio />
        </div>
    }
    else
    {
        <Carregando />
    }
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private Diario diarioAtual { get; set; }

    private InfoNutricional relatorio { get; set; }
    private Action atualizarRelatorio { get; set; }

    private double bmr { get; set; } = 2000;
    private bool resumoSemanal = false;

    public DiarioView()
    {
        relatorio = new InfoNutricional();
        atualizarRelatorio = () =>
        {
            CalcularRelatorioGeral();
            StateHasChanged();
        };
    }

    protected async override Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        if (authState != null && authState.User.Identity.IsAuthenticated)
        {
            diarioAtual = await _diarioService.GetDiarioHoje();
            Console.WriteLine(diarioAtual);
            CalcularRelatorioGeral();
            bmr = await CalcularBMR();
        }
    }

    private async void TrocarDiario(bool voltar = true)
    {
        DateTime data;
        if (voltar)
            data = diarioAtual.data.Subtract(TimeSpan.FromDays(1));
        else
            data = diarioAtual.data.AddDays(1);
        Console.WriteLine(data);
        diarioAtual = await _diarioService.GetDiarioPorData(data);
        CalcularRelatorioGeral();
        StateHasChanged();
    }

    private Periodo GetPeriodoAtual()
    {
        return DateTime.Now.Hour switch
        {
            >= 4 and <= 11 => Periodo.Manha,
            >= 12 and <= 16 => Periodo.Almoco,
            >= 17 and <= 24 => Periodo.Janta,
            _ => Periodo.Lanche,
        };
    }

    private async Task<double> CalcularBMR()
    {
        // REE(males) = 10 x weight(kg) + 6.25 x height(cm) - 5 x age(y) + 5;
        // REE(females) = 10 x weight(kg) + 6.25 x height(cm) - 5 x age(y) - 161.
        //Sedentary * 1.2 //Lightly active *1.375 //Moderately active *1.55 //Active * 1.725 //Very active *1.9
        var auth = await authenticationState;

        double.TryParse(auth.User.Claims.First(c => c.Type.Contains("peso")).Value, out double peso);
        int.TryParse(auth.User.Claims.First(c => c.Type.Contains("altura")).Value, out int altura);
        int idade = DateTime.Parse(auth.User.Claims.First(c => c.Type == ClaimTypes.DateOfBirth).Value).Year - DateTime.Now.Year;
        Enum.TryParse(auth.User.Claims.First(c => c.Type == ClaimTypes.Gender).Value, out Sexo sexo);
        Enum.TryParse(auth.User.Claims.First(c => c.Type.Contains("atividade")).Value, out NivelAtividade nivelAtividade);

        return (10 * peso) + (6.25 * altura) - (5 * idade) + (sexo == Sexo.masculino ? 5 : -161)
            * (NivelAtividadeHelper.GetValorAtividade(nivelAtividade));
    }

    private void CalcularRelatorioGeral()
    {
        relatorio = diarioAtual.Refeicoes.Select(a => a.GerarRelatorio()).Aggregate((a, b) => a + b);
    }

    private async Task SalvarDiario()
    {
        await _diarioService.SetDiario(diarioAtual);
    }

    public async void Dispose()
    {
        await SalvarDiario();
    }

}