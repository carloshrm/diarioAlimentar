@using System.Security.Claims;
@using Timer = System.Timers.Timer;

@using diarioAlimentar.Client.Services;
@using diarioAlimentar.Shared;
@inject DiarioService _diarioService;


<h3>@test</h3>
<button @onclick=@(async () => {
    await _diarioService.SetDiario();
    })>teste</button>
<div>
    
    energia / macro / nutri
    @foreach (var alm in refeicaoAtual.alimentos)
    {
        <AlimentoView porcao=alm />
    }
</div>

<AddAlimentoForm refSetter=@refeicaoSetter />

@code {
    private string test = "";

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private Diario diarioAtual { get; set; }
    private Refeicao refeicaoAtual { get; set; }

    private InfoNutricional relatorio { get; set; }
    private Action<Porcao> refeicaoSetter { get; set; }

    private double baseTotal { get; set; }
    private ClaimsPrincipal? usuario { get; set; }

    public DiarioView()
    {
        refeicaoSetter = setItemRefeicao;
        diarioAtual = new();
        refeicaoAtual = new Refeicao(Periodo.Lanche);
    }

    private string user;
    protected async override Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        if (authState != null && authState.User.Identity.IsAuthenticated)
            usuario = authState.User;
        else
            usuario = null;
        CalcularBMR();
    }

    private async Task<double> CalcularBMR()
    {
        // REE(males) = 10 x weight(kg) + 6.25 x height(cm) - 5 x age(y) + 5;
        // REE(females) = 10 x weight(kg) + 6.25 x height(cm) - 5 x age(y) - 161.
        // https://doi.org/10.1093%2Fajcn%2F51.2.241

        foreach (var c in usuario.Claims)
        {
            Console.WriteLine(c.Type + "---");
            Console.WriteLine(c.Value);
        }
        return 0;

    }

    private void setItemRefeicao(Porcao a)
    {
        refeicaoAtual.alimentos.Add(a);
        relatorio = refeicaoAtual.GerarRelatorio();
        StateHasChanged();
    }
}